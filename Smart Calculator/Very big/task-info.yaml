type: edu
custom_name: stage8
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import calculator.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram(Main.class);

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: test/calculator/CalculatorTest.java
  visible: true
  text: |
    package calculator;

    import org.junit.Assert;
    import org.junit.Test;

    /**
     * Test for {@link Calculator}.
     *
     * @author dzmitry.marudau
     * @since 2020.4
     */
    public class CalculatorTest {

        private final Calculator calculator = new Calculator();

        @Test
        public void calculate() {
            Assert.assertEquals(8, calculator.calculate("5 + 3"));
            Assert.assertEquals(12, calculator.calculate("5 + 4 + 3"));
            Assert.assertEquals(14, calculator.calculate("5 + 4 + 3 + 2"));

            Assert.assertEquals(2, calculator.calculate("5 - 3"));
            Assert.assertEquals(1, calculator.calculate("5 - 3 - 1"));
            Assert.assertEquals(2, calculator.calculate("5 - 1 - 1 - 1"));

            Assert.assertEquals(12, calculator.calculate("4 * 3"));
            Assert.assertEquals(24, calculator.calculate("4 * 3 * 2"));

            Assert.assertEquals(6, calculator.calculate("5 + 1 -- 1 - 1"));
            Assert.assertEquals(4, calculator.calculate("5 + 1 --- 1 - 1"));
            Assert.assertEquals(8, calculator.calculate("5 + 1 ---- 1 -- 1"));
        }

        @Test
        public void calculateEdgeCases() {
            Assert.assertEquals(8, calculator.calculate("5 ++ 3"));
            Assert.assertEquals(8, calculator.calculate("5 -- 3"));
            Assert.assertEquals(2, calculator.calculate("5 --- 3"));
            Assert.assertEquals(8, calculator.calculate("5 ---- 3"));
            Assert.assertEquals(2, calculator.calculate("5 ----- 3"));
        }

        @Test
        public void calculateInPostfixNotation() {
            Assert.assertEquals(8, calculator.calculateInPostfixNotation("5 3 +"));
            Assert.assertEquals(12, calculator.calculateInPostfixNotation("5 4 3 + +"));

            Assert.assertEquals(15, calculator.calculateInPostfixNotation("5 3 *"));
            Assert.assertEquals(35, calculator.calculateInPostfixNotation("5 4 3 + *"));

            Assert.assertEquals(48, calculator.calculateInPostfixNotation("8 3 * 12 4 2 - * +"));
        }

        @Test
        public void infixToPostfix() {
            Assert.assertEquals("1 2 +", infixToPostfixAsString("1 + 2"));
            Assert.assertEquals("1 2 *", infixToPostfixAsString("1 * 2"));
            Assert.assertEquals("1 2 * 3 +", infixToPostfixAsString("1 * 2 + 3"));
            Assert.assertEquals("1 2 * 3 +", infixToPostfixAsString("1 * 2 + 3"));
            Assert.assertEquals("1 2 * 3 4 * +", infixToPostfixAsString("1 * 2 + 3 * 4"));
            Assert.assertEquals("3 2 4 * +", infixToPostfixAsString("3 + 2 * 4"));
        }

        @Test
        public void infixToPostfix_withExpressions() {
            Assert.assertEquals("a b +", infixToPostfixAsString("a + b"));
            Assert.assertEquals("a b + c +", infixToPostfixAsString("a + b + c"));
            Assert.assertEquals("a b c * +", infixToPostfixAsString("a + b * c"));
            Assert.assertEquals("a b * c d e - * +", infixToPostfixAsString("a * b + c * ( d - e )"));
        }

        @Test
        public void infixToPostfix_withBrackets() {
            Assert.assertEquals("2 3 4 + * 1 +", infixToPostfixAsString("2 * ( 3 + 4 ) + 1"));
            Assert.assertEquals("2 3 4 + * 1 +", infixToPostfixAsString("2 * (3 + 4) + 1"));
            Assert.assertEquals("2 3 4 + * 1 +", infixToPostfixAsString("2 * ( 3 + 4) + 1"));
            Assert.assertEquals("2 3 4 + * 1 +", infixToPostfixAsString("2 * (3 + 4 ) + 1"));

            Assert.assertEquals("8 3 * 12 4 2 - * +", infixToPostfixAsString("8 * 3 + 12 * ( 4 - 2 )"));
            Assert.assertEquals("8 3 * 12 4 2 - * +", infixToPostfixAsString("8 * 3 + 12 * (4 - 2)"));
            Assert.assertEquals("8 3 * 12 4 2 - * +", infixToPostfixAsString("8 * 3 + 12 * (4 - 2 )"));
            Assert.assertEquals("8 3 * 12 4 2 - * +", infixToPostfixAsString("8 * 3 + 12 * ( 4 - 2)"));

            Assert.assertEquals("2 3 4 * + 5 6 * +", infixToPostfixAsString(" 2 + ( 3 * 4 ) + ( 5 * 6)"));
            //Assert.assertEquals("7 3 4 3 + 7 * 1 + * + 6 2 1 + / -", infixToPostfixAsString("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)"));
        }

        private String infixToPostfixAsString(String string) {
            return String.join(" ", calculator.infixToPostfix(string));
        }
    }
  learner_created: false
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Collections;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.Optional;
    import java.util.Stack;
    import java.util.stream.Collectors;

    /**
     * Calculator logic.
     *
     * @author dzmitry.marudau
     * @since 2020.4
     */
    public class Calculator {
        public static final String ASSIGNMENT_DELIMITER_REGEX = "\\s*=\\s*";
        public static final String LETTERS_REGEX = "[A-Za-z]+";
        public static final String NUMBERS_REGEX = "-?+[\\d]+";
        public static final String EXPRESSION_REGEX = "((-*)|(\\+*)|([a-zA-Z0-9])|(\\s*))+";

        private static final Map<String, Integer> PRECEDENCE =
            Map.of("+", 0, "-", 0, "*", 1, "/", 1);

        private static final String COMMAND_HELP = "/help";

        private final Map<String, Integer> variables = new HashMap<>();

        public Map<String, Integer> getVariables() {
            return variables;
        }

        public void assign(String input) {
            String[] strings = input.trim().split(ASSIGNMENT_DELIMITER_REGEX);
            String name = strings[0].trim();
            String value = strings[1].trim();

            if (value.matches(NUMBERS_REGEX)) {
                variables.put(name, Integer.parseInt(value));
            } else if (value.matches(LETTERS_REGEX)) {
                if (variables.containsKey(value)) {
                    variables.put(name, variables.get(value));
                } else {
                    System.out.println("Unknown variable");
                }
            }
        }

        public int calculate(String input) {
            String[] elements = input.trim().replaceAll(" {2,}", " ").split(" ");
            int sum = 0;
            char sign = '+';
            for (String element : elements) {
                int value;
                if (element.matches(LETTERS_REGEX)) {
                    value = resolveTheValue(element);
                    sum += sign * value;
                } else if (element.matches(NUMBERS_REGEX)) {
                    value = Integer.parseInt(element);
                    switch (sign) {
                    case '+':
                        sum += value;
                        break;
                    case '-':
                        sum -= value;
                        break;
                    case '*':
                        sum *= value;
                        break;
                    case '/':
                        sum /= value;
                        break;
                    }
                } else {
                    sign = determineSign(element);
                }
            }
            return sum;
        }

        public int calculateInPostfixNotation(String expressionInPostfixNotation) {
            String[] elements = expressionInPostfixNotation.trim().replaceAll(" {2,}", " ").split(" ");
            return calculateInPostfixNotation(Arrays.asList(elements));
        }

        public int calculateInPostfixNotation(List<String> elements) {
            Stack<Integer> stack = new Stack<>();
            for (String element : elements) {
                if (element.matches(NUMBERS_REGEX)) {
                    //If the incoming element is a number, push it into the stack
                    stack.push(Integer.parseInt(element));
                } else if (element.matches(LETTERS_REGEX)) {
                    //If the incoming element is the name of a variable, push its value into the stack.
                    stack.push(resolveTheValue(element));
                } else {
                    //If the incoming element is an operator, then pop twice to get two numbers
                    // and perform the operation; push the result on the stack.
                    Integer a = stack.pop();
                    Integer b = stack.pop();
                    switch (element.charAt(0)) {
                    case '+':
                        stack.push(b + a);
                        break;
                    case '-':
                        stack.push(b - a);
                        break;
                    case '*':
                        stack.push(b * a);
                        break;
                    case '/':
                        stack.push(b / a);
                        break;
                    }
                }
            }
            //When the expression ends, the number on the top of the stack is a final result.
            return stack.pop();
        }

        public Optional<String> getVariableValue(String key) {
            return Optional.ofNullable(variables.get(key)).map(String::valueOf);
        }

        public Optional<String> getCommandInfo(String input) {
            if (COMMAND_HELP.equalsIgnoreCase(input)) {
                return Optional.of("The program calculates simple Math operations");
            }
            return Optional.empty();
        }

        private int resolveTheValue(String variable) {
            return variables.get(variable) != null ? Integer.parseInt(variables.get(variable).toString()) : 0;
        }

        private char determineSign(String input) {
            char sign;
            if (input.matches("[-]{2,}")) {
                sign = input.length() % 2 != 0 ? '-' : '+';
            } else {
                sign = input.charAt(0);
            }
            return sign;
        }

        private String normalizeSign(String input) {
            if (input.matches("[-]{2,}")) {
                return input.length() % 2 != 0 ? "-" : "+";
            }
            return input;
        }

        public List<String> infixToPostfix(String input) throws IllegalArgumentException {
            List<String> strings = normalize(input);
            return infixToPostfix(strings);
        }

        private List<String> normalize(String input) {
            String[] strings = input.trim()
                                  .replaceAll("\\(", " ( ")
                                  .replaceAll("\\)", " ) ")
                                  .replaceAll("\\+{2,}", "+")
                                  .replaceAll("\\+", " + ")
                                  .replaceAll("\\*", " * ")
                                  .replaceAll("\\/", " / ")
                                  .replaceAll(" {2,}", " ")
                                  .split(" ");

            List<String> result = Arrays.asList(strings);
            result.replaceAll(this::normalizeSign);
            return result;
        }

        private List<String> infixToPostfix(List<String> input) throws IllegalArgumentException {
            Stack<String> stack = new Stack<>();
            List<String> result = new ArrayList<>();
            for (String incoming : input) {
                if (incoming.matches(NUMBERS_REGEX) || incoming.matches(LETTERS_REGEX)) {
                    //Add operands (numbers and variables) to the result (postfix notation) as they arrive.
                    result.add(incoming);
                    continue;
                }

                //If the stack is empty push the incoming operator on the stack.
                if (stack.empty()) {
                    stack.push(incoming);
                    continue;
                }

                // If the stack contains a left parenthesis on top, push the incoming operator on the stack.
                if (stack.peek().equals("(")) {
                    stack.push(incoming);
                    continue;
                }

                //If the incoming element is a left parenthesis, push it on the stack.
                if (incoming.equals("(")) {
                    stack.push(incoming);
                    continue;
                }

                // If the incoming element is a right parenthesis,
                // pop the stack and add operators to the result until you see a left parenthesis.
                // Discard the pair of parentheses.
                if (incoming.equals(")")) {
                    String current;
                    do {
                        result.add(stack.pop());
                        current = stack.peek();
                    }
                    while (!current.equals("("));
                    stack.pop();

                    continue;
                }

                String top = stack.peek();
                if (PRECEDENCE.get(incoming).compareTo(PRECEDENCE.get(top)) > 0) {
                    //If the incoming operator has higher precedence than the top of the stack, push it on the stack.
                    stack.push(incoming);
                } else {
                    //If the incoming operator has lower or equal precedence than the top of the operator stack,
                    // pop the stack and add operators to the result
                    // until you see an operator that has a smaller precedence
                    // or a left parenthesis on the top of the stack;
                    // then add the incoming operator to the stack.
                    String current;
                    do {
                        current = stack.peek();
                        result.add(stack.pop());
                    }
                    while (!stack.empty() && !(current.equals("(") || PRECEDENCE.get(current).compareTo(PRECEDENCE.get(incoming)) > 0));
                    stack.push(incoming);
                }

            }

            //At the end of the expression, pop the stack and add all operators to the result.
            List<String> allOperandsOnStack = stack.stream().filter("+-*/"::contains)
                                                    .collect(Collectors.toList());
            Collections.reverse(allOperandsOnStack);
            result.addAll(allOperandsOnStack);
            stack.removeAll(allOperandsOnStack);

            //No parentheses should remain on the stack. Otherwise, the expression has unbalanced brackets.
            // It is a syntax error.
            if (!stack.empty()) {
                throw new IllegalArgumentException("Incorrect expressions");
            }

            return result;

        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/227/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 22 Dec 2020 13:50:00 UTC
record: -1
